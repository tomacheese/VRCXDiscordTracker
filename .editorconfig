# =========================
# 全般設定
# =========================
# このファイルをルートとして扱う
root = true

[*.cs]
# =========================
# インデント・改行・文字コード
# =========================
# インデントにスペースのみを使用する強制
indent_style = space
# インデント幅（1レベルあたりのスペース数）を4スペースに固定する強制
indent_size = 4
# タブ幅を4スペースとして扱う強制
tab_width = 4
# 改行コードをCRLF（\r\n）のみに限定する強制
end_of_line = crlf
# ファイル末尾の自動改行追加の禁止
insert_final_newline = false
# 行末の空白自動削除の強制
trim_trailing_whitespace = true
# ファイルの文字エンコーディングをUTF-8のみに限定する強制
charset = utf-8

# =========================
# C# コードスタイル: ブレース・式本体
# =========================
# すべてのブレース（{）の前の改行の強制
csharp_new_line_before_open_brace = all
# 制御構文でのブレース省略の禁止
csharp_prefer_braces = when_multiline:warning
# アクセサの式本体（=>）実装の強制
csharp_style_expression_bodied_accessors = when_on_single_line:warning
# コンストラクタの式本体（=>）実装の強制
csharp_style_expression_bodied_constructors = when_on_single_line:warning
# インデクサの式本体（=>）実装の強制
csharp_style_expression_bodied_indexers = when_on_single_line:warning
# メソッドの式本体（=>）実装の強制
csharp_style_expression_bodied_methods = when_on_single_line:warning
# 演算子の式本体（=>）実装の強制
csharp_style_expression_bodied_operators = when_on_single_line:warning
# プロパティの式本体（=>）実装の強制
csharp_style_expression_bodied_properties = when_on_single_line:warning

# =========================
# C# コードスタイル: パターン・var・using
# =========================
# パターンマッチング構文の使用強制
csharp_prefer_pattern_matching = true:warning
# default値の簡易記法（default）使用の強制
csharp_prefer_simple_default_expression = true:warning
# switch式の使用強制
csharp_prefer_switch_expression = true:warning
# ローカル関数でのパターン優先の強制
csharp_style_pattern_local_over_anonymous_function = true:warning
# 匿名型メンバー名の型推論省略形使用の強制
csharp_style_prefer_inferred_anonymous_type_member_names = true:warning
# タプルメンバー名の型推論省略形使用の強制
csharp_style_prefer_inferred_tuple_names = true:warning
# using宣言形式（using var）記述の強制
csharp_style_prefer_using_declaration = true:warning
# varの型明確時のみ使用許可
csharp_style_var_elsewhere = false:warning
# 組み込み型でのvar使用の強制
csharp_style_var_for_built_in_types = true:warning
# 型明示時のvar使用の強制
csharp_style_var_when_type_is_apparent = true:warning

# =========================
# C# コードスタイル: usingディレクティブ
# =========================
# usingディレクティブのグループ分け禁止
dotnet_separate_import_directive_groups = false
# System名前空間usingの先頭配置の強制
dotnet_sort_system_directives_first = true:warning

# =========================
# C# コードスタイル: 型名・メンバーアクセス
# =========================
# ローカル・パラメータ・メンバーでの組み込み型名使用の強制
dotnet_style_predefined_type_for_locals_parameters_members = true
# メンバーアクセス時の組み込み型名使用の強制
dotnet_style_predefined_type_for_member_access = true
# イベントアクセス時の修飾子付与禁止
dotnet_style_qualification_for_event = false
# フィールドアクセス時の修飾子付与禁止
dotnet_style_qualification_for_field = false
# メソッドアクセス時の修飾子付与禁止
dotnet_style_qualification_for_method = false
# プロパティアクセス時の修飾子付与禁止
dotnet_style_qualification_for_property = false

# =========================
# C# コードスタイル: 名前空間
# =========================
# 名前空間のスコープはファイル単位とする
csharp_style_namespace_declarations = file_scoped:warning

# =========================
# C# コードスタイル: 不要な括弧の扱い
# =========================
# 算術演算子の優先順位を明確にするためにかっこを優先する
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
# かっこを使用して他の二項演算子の優先順位を明確にする
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
# 関係演算子の優先順位を明確にするためにかっこを優先する
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity
# 他の演算子の優先順位を明確にするためにかっこを優先する
dotnet_style_parentheses_in_other_operators = never_if_unnecessary

# =========================
# C# コードスタイル: アクセシビリティ修飾子の要求
# =========================
# パブリック インターフェイス メンバーを除き、アクセシビリティ修飾子を優先
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# =========================
# C# コードスタイル: フォーマットルール
# =========================
# 新しい行に catch ステートメントを配置
csharp_new_line_before_catch = true
# 新しい行に else ステートメントを配置
csharp_new_line_before_else = true
# 新しい行に finally ステートメントを配置
csharp_new_line_before_finally = true
# ブロックの内容をインデントする
csharp_indent_block_contents = true
# 中かっこをインデントしない
csharp_indent_braces = false
# switch ケース コンテンツにインデントを付ける
csharp_indent_case_contents = true
# ブロック付きの switch ケース コンテンツにインデントを付けない
csharp_indent_case_contents_when_block = false
# switch ケース ラベルをインデントする
csharp_indent_switch_labels = true
# for ループなど、制御フロー ステートメントのキーワードの後に空白文字を配置する
csharp_space_after_keywords_in_control_flow_statements = true
# バイナリ演算子の前後にスペースを挿入する
csharp_space_around_binary_operators = before_and_after
# コンマの後にスペースを挿入する
csharp_space_after_comma = true
# コンマの前にスペースを挿入しない
csharp_space_before_comma = false

# =========================
# 診断・警告レベルの設定
# =========================
# CA1031: 一般的な Exception キャッチの抑制を無効化
dotnet_diagnostic.CA1031.severity = none
# CA1051: public フィールド宣言の回避
dotnet_diagnostic.CA1051.severity = warning
# CA1063: IDisposable 実装の正しい Dispose パターン
dotnet_diagnostic.CA1063.severity = warning
# CA1305: IFormatProvider の明示指定
dotnet_diagnostic.CA1305.severity = warning
# CA1707: 識別子のアンダースコア禁止
dotnet_diagnostic.CA1707.severity = warning
# CA1801: 未使用引数の削除
dotnet_diagnostic.CA1801.severity = warning
# CA1820: 空文字列チェックに string.IsNullOrEmpty を使用
dotnet_diagnostic.CA1820.severity = warning
# CA1822: static 化可能メンバーの警告
dotnet_diagnostic.CA1822.severity = warning
# CA9999: カスタムコード分析ルール違反
dotnet_diagnostic.CA9999.severity = warning
# CS8602: ヌル参照可能性チェック
dotnet_diagnostic.CS8602.severity = warning
# CS8618: 非 null プロパティの初期化漏れ
dotnet_diagnostic.CS8618.severity = warning
# IDE0003: 型を明示的に指定
dotnet_diagnostic.IDE0003.severity = warning
# IDE0004: 不要なキャストの除去
dotnet_diagnostic.IDE0004.severity = warning
# IDE0005: 未使用 using ディレクティブの除去
dotnet_diagnostic.IDE0005.severity = warning
# IDE0017: オブジェクト初期化子の活用
dotnet_diagnostic.IDE0017.severity = warning
# IDE0018: 変数スコープの最小化
dotnet_diagnostic.IDE0018.severity = warning
# IDE0019: パターンマッチングの利用
dotnet_diagnostic.IDE0019.severity = warning
# IDE0020: 不要な null 合体演算子の除去
dotnet_diagnostic.IDE0020.severity = warning
# IDE0021: 不要な null 条件演算子の除去
dotnet_diagnostic.IDE0021.severity = warning
# IDE0022: 不要な null 許容型の除去
dotnet_diagnostic.IDE0022.severity = warning
# IDE0028: 不要な条件演算子の除去
dotnet_diagnostic.IDE0028.severity = warning
# IDE0030: 不要な this 修飾子の除去
dotnet_diagnostic.IDE0030.severity = warning
# IDE0031: 不要な base 修飾子の除去
dotnet_diagnostic.IDE0031.severity = warning
# IDE0039: 不要な readonly 修飾子の除去
dotnet_diagnostic.IDE0039.severity = warning
# IDE0044: 変更不可フィールドに readonly を付与
dotnet_diagnostic.IDE0044.severity = warning
# IDE0050: 不要な private 修飾子の除去
dotnet_diagnostic.IDE0050.severity = warning
# IDE0051: 未使用 private メンバーの削除
dotnet_diagnostic.IDE0051.severity = warning
# IDE0052: 書き込み専用未使用フィールドの警告
dotnet_diagnostic.IDE0052.severity = warning
# IDE0055: コードフォーマットの自動適用
dotnet_diagnostic.IDE0055.severity = warning
# IDE0059: 未使用変数の削除
dotnet_diagnostic.IDE0059.severity = warning
# IDE0060: 未使用パラメータの削除
dotnet_diagnostic.IDE0060.severity = warning
# IDE0063: using ステートメントのスコープ確認
dotnet_diagnostic.IDE0063.severity = warning
# IDE0075: 不要な条件式の除去
dotnet_diagnostic.IDE0075.severity = warning
# IDE0078: 不要な switch 式の除去
dotnet_diagnostic.IDE0078.severity = warning
# IDE0079: 不要な #pragma の除去
dotnet_diagnostic.IDE0079.severity = warning
# IDE0080: 不要な null 許容型の除去
dotnet_diagnostic.IDE0080.severity = warning
# IDE0090: 型推論の抑制
dotnet_diagnostic.IDE0090.severity = warning
# IDE0091: 不要な型明示の削除
dotnet_diagnostic.IDE0091.severity = warning
# IDE0092: 不要な型変換の削除
dotnet_diagnostic.IDE0092.severity = warning
# IDE0110: 不要な null 許容型の除去
dotnet_diagnostic.IDE0110.severity = warning
# IDE0111: 不要な null 許容型の除去
dotnet_diagnostic.IDE0111.severity = warning
# IDE1006: 命名規則違反の警告
dotnet_diagnostic.IDE1006.severity = warning

# =========================
# 命名規則 (.NET Naming Rules)
# =========================
# メソッド名をPascalCaseで強制
dotnet_naming_rule.methods_should_be_pascal_case.severity = warning
# メソッド名に対するルール適用対象指定
dotnet_naming_rule.methods_should_be_pascal_case.symbols = methods
# メソッド名のスタイル指定（PascalCase）
dotnet_naming_rule.methods_should_be_pascal_case.style = pascal_case

# インターフェース名をIで始めることを強制
dotnet_naming_rule.interface_should_be_prefixed_with_i.severity = warning
# インターフェース名に対するルール適用対象指定
dotnet_naming_rule.interface_should_be_prefixed_with_i.symbols = interface
# インターフェース名のスタイル指定（I+PascalCase）
dotnet_naming_rule.interface_should_be_prefixed_with_i.style = begins_with_i

# 型名をPascalCaseで強制
dotnet_naming_rule.types_should_be_pascal_case.severity = warning
# 型名に対するルール適用対象指定
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
# 型名のスタイル指定（PascalCase）
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

# privateフィールド名を_で始めるcamelCaseで強制
dotnet_naming_rule.private_fields_should_be_camel_case_prefixed.severity = warning
# privateフィールド名に対するルール適用対象指定
dotnet_naming_rule.private_fields_should_be_camel_case_prefixed.symbols = private_fields
# privateフィールド名のスタイル指定（_+camelCase）
dotnet_naming_rule.private_fields_should_be_camel_case_prefixed.style = camel_case_with_underscore

# publicフィールド名をPascalCaseで強制
dotnet_naming_rule.public_fields_should_be_pascal_case.severity = warning
# publicフィールド名に対するルール適用対象指定
dotnet_naming_rule.public_fields_should_be_pascal_case.symbols = public_fields
# publicフィールド名のスタイル指定（PascalCase）
dotnet_naming_rule.public_fields_should_be_pascal_case.style = pascal_case

# プロパティ名をPascalCaseで強制
dotnet_naming_rule.properties_should_be_pascal_case.severity = warning
# プロパティ名に対するルール適用対象指定
dotnet_naming_rule.properties_should_be_pascal_case.symbols = properties
# プロパティ名のスタイル指定（PascalCase）
dotnet_naming_rule.properties_should_be_pascal_case.style = pascal_case

# 定数名をPascalCaseで強制
dotnet_naming_rule.constants_should_be_pascal_case.severity = warning
# 定数名に対するルール適用対象指定
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
# 定数名のスタイル指定（PascalCase）
dotnet_naming_rule.constants_should_be_pascal_case.style = pascal_case

# enumメンバー名をPascalCaseで強制
dotnet_naming_rule.enum_members_should_be_pascal_case.severity = warning
# enumメンバー名に対するルール適用対象指定
dotnet_naming_rule.enum_members_should_be_pascal_case.symbols = enum_members
# enumメンバー名のスタイル指定（PascalCase）
dotnet_naming_rule.enum_members_should_be_pascal_case.style = pascal_case

# イベント名をPascalCaseで強制
dotnet_naming_rule.events_should_be_pascal_case.severity = warning
# イベント名に対するルール適用対象指定
dotnet_naming_rule.events_should_be_pascal_case.symbols = events
# イベント名のスタイル指定（PascalCase）
dotnet_naming_rule.events_should_be_pascal_case.style = pascal_case

# パラメータ名をcamelCaseで強制
dotnet_naming_rule.parameters_should_be_camel_case.severity = warning
# パラメータ名に対するルール適用対象指定
dotnet_naming_rule.parameters_should_be_camel_case.symbols = parameters
# パラメータ名のスタイル指定（camelCase）
dotnet_naming_rule.parameters_should_be_camel_case.style = camel_case

# ローカル変数名をcamelCaseで強制
dotnet_naming_rule.locals_should_be_camel_case.severity = warning
# ローカル変数名に対するルール適用対象指定
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals
# ローカル変数名のスタイル指定（camelCase）
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case

# =========================
# 命名規則: シンボル仕様
# =========================
# インターフェースに対する適用範囲指定
dotnet_naming_symbols.interface.applicable_kinds = interface
# インターフェースのアクセス修飾子指定なし
dotnet_naming_symbols.interface.applicable_accessibilities = *
# インターフェースの修飾子指定なし
dotnet_naming_symbols.interface.required_modifiers =
# 型全般に対する適用範囲指定
dotnet_naming_symbols.types.applicable_kinds = class, struct, enum, interface
# 型全般のアクセス修飾子指定なし
dotnet_naming_symbols.types.applicable_accessibilities = *
# 型全般の修飾子指定なし
dotnet_naming_symbols.types.required_modifiers =
# privateフィールドに対する適用範囲指定
dotnet_naming_symbols.private_fields.applicable_kinds = field
# privateフィールドのアクセス修飾子指定（private）
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
# privateフィールドの修飾子指定なし
dotnet_naming_symbols.private_fields.required_modifiers =
# publicフィールドに対する適用範囲指定
dotnet_naming_symbols.public_fields.applicable_kinds = field
# publicフィールドのアクセス修飾子指定（public）
dotnet_naming_symbols.public_fields.applicable_accessibilities = public
# 定数に対する適用範囲指定
dotnet_naming_symbols.constants.applicable_kinds = field
# 定数のアクセス修飾子指定なし
dotnet_naming_symbols.constants.applicable_accessibilities = *
# 定数の修飾子指定（const）
dotnet_naming_symbols.constants.required_modifiers = const
# enumメンバーに対する適用範囲指定
dotnet_naming_symbols.enum_members.applicable_kinds = enum_member
# enumメンバーのアクセス修飾子指定なし
dotnet_naming_symbols.enum_members.applicable_accessibilities = *
# enumメンバーの修飾子指定なし
dotnet_naming_symbols.enum_members.required_modifiers =
# メソッドに対する適用範囲指定
dotnet_naming_symbols.methods.applicable_kinds = method
# メソッドのアクセス修飾子指定なし
dotnet_naming_symbols.methods.applicable_accessibilities = *
# メソッドの修飾子指定なし
dotnet_naming_symbols.methods.required_modifiers =
# プロパティに対する適用範囲指定
dotnet_naming_symbols.properties.applicable_kinds = property
# プロパティのアクセス修飾子指定なし
dotnet_naming_symbols.properties.applicable_accessibilities = *
# プロパティの修飾子指定なし
dotnet_naming_symbols.properties.required_modifiers =
# イベントに対する適用範囲指定
dotnet_naming_symbols.events.applicable_kinds = event
# イベントのアクセス修飾子指定なし
dotnet_naming_symbols.events.applicable_accessibilities = *
# イベントの修飾子指定なし
dotnet_naming_symbols.events.required_modifiers =
# パラメータに対する適用範囲指定
dotnet_naming_symbols.parameters.applicable_kinds = parameter
# パラメータのアクセス修飾子指定なし
dotnet_naming_symbols.parameters.applicable_accessibilities = *
# パラメータの修飾子指定なし
dotnet_naming_symbols.parameters.required_modifiers =
# ローカル変数に対する適用範囲指定
dotnet_naming_symbols.locals.applicable_kinds = local

# =========================
# 命名規則: スタイル仕様
# =========================
# インターフェース名の接頭辞指定（I）
dotnet_naming_style.begins_with_i.required_prefix = I
# インターフェース名の大文字小文字指定（PascalCase）
dotnet_naming_style.begins_with_i.capitalization = pascal_case
# PascalCaseスタイル指定
dotnet_naming_style.pascal_case.capitalization = pascal_case
# _+camelCaseスタイル指定
dotnet_naming_style.camel_case_with_underscore.required_prefix = _
# _+camelCaseの大文字小文字指定
dotnet_naming_style.camel_case_with_underscore.capitalization = camel_case
